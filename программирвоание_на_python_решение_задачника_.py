# -*- coding: utf-8 -*-
"""Программирвоание на Python. Решение Задачника.

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z1PihBf5UiMKe6EveyipzhdjNZQL_fgc

#Хачатуров Самвел Артёмович, Группа ОДБИ-101Б
"""

import math

"""# ***Задачи на числа и математические выражения***

Задание 1.13 Вычислите значение арифметического выражения при заданных значениях переменных и выведите полученный результат на экран: x(3.3 + 2y) - |64:(x + y)| при x=-4.1, y=2.
"""

x = -4.1
y = 2

part1 = x * (3.3 + 2 * y)
part2 = abs(64 / (x + y))
result = part1 - part2

print(result)

"""Задание 1.9 Найдите значение выражения в десятичной системе счисления: (1EA16 + 010111012 - 2378 - 68110)*21023. Выведите результат на экран."""

import math
hex_num = int('1EA', 16)
bin_num = int('01011101', 2)
oct_num = int('237', 8)
dec_num = 681
base23_num = int('210', 23)


brackets = (hex_num + bin_num - oct_num - dec_num)

result = brackets * base23_num

print(result)

"""Задание 1.10 Извлеките квадратный корень из 196 тремя способами"""

result1 = 196 ** 0.5
print(result1)  # 14.0

result3 = pow(196, 0.5)
print(result3)


import math
result4 = math.pow(196, 0.5)
print(result4)

result2 = math.sqrt(196)
print(result2)  # 14.0

"""# ***Задачи на строки***

Задание 2.5 Дана строка 'AaBbCcDd'. Используя срезы с шагом получите две строки: только с заглавными и только со строчными буквами. Выведите их на экран
"""

s = 'AaBbCcDd'


uppercase = s[::2]


lowercase = s[1::2]

print("Заглавные буквы:", uppercase)
print("Строчные буквы:", lowercase)

"""Задание 2.7 Дана строка '0123456789'. Удалите из нее первый, пятый и последний символы. Выведите результат на экран"""

s = '0123456789'
result = s[1:4] + s[5:-1]
print(result)

"""

Задание 2.23 Подсчитайте общее количество алфавитных символов Юникода в строке 'a1, b2, c3, e4, d5, f6.' и выведите результат на экран."""

number = 377.37177785772707


str_num = str(number)
integer_part, fractional_part = str_num.split('.')


count_7 = fractional_part.count('7')

print(f"Количество цифр '7' в дробной части: {count_7}")

"""# ***Задачи на списки***

Задание 3.5 Дан список ['a', '1', 'b', '2', 'c', '3']. Разбейте его на два списка: только с буквами и только с числами. Сам список затем удалите, а новые списки выведите на экран, каждый на отдельной строке.
"""

original_list = ['a', '1', 'b', '2', 'c', '3']
letters = []
numbers = []

for item in original_list:
    if item.isalpha():
        letters.append(item)
    elif item.isdigit():
        numbers.append(item)

del original_list
print(letters)
print(numbers)

"""Задание 3.7 Дан список [3, 4, 1, 1, 5, 1]. Выведите на экран: количество всех элементов в списке, количество единиц в списке, индекс первого вхождения единицы в список."""

lst = [3, 4, 1, 1, 5, 1]

total_elements = len(lst)
print("Количество всех элементов в списке:", total_elements)

count_ones = lst.count(1)
print("Количество единиц в списке:", count_ones)

first_index_of_one = lst.index(1)
print("Индекс первого вхождения единицы в список:", first_index_of_one)

"""Задание 3.17 Дан список натуральных чисел [13, 5, 5, 8, 16, 4]. Удалите из него первое четное число, имеющее нечетный индекс. Выведите измененный список на экран"""

numbers = [13, 5, 5, 8, 16, 4]


found = False
for index, num in enumerate(numbers):
    if index % 2 != 0 and num % 2 == 0:
        del numbers[index]
        found = True
        break

if not found:
    print("Нет подходящего элемента для удаления.")
else:
    print("Измененный список:", numbers)

"""# ***Задачи на кортежи***

Задание 4.1 Создайте кортеж, в качестве элементов которого используйте целое, вещественное и комплексное числа, кортеж с одним элементом в виде строки, пустой кортеж и пустой список. Выведите на экран строку вложенного кортежа.
"""

my_tuple = (
    42,
    3.14,
    2 + 3j,
    ("строка",),
    (),
    []
)

print("Весь кортеж:", my_tuple)

nested_tuple_string = my_tuple[3][0]
print("Строка из вложенного кортежа:", nested_tuple_string)

"""Задание 4.5 Дан кортеж (3, 's', 1, 5, 's'). Выведите на экран: количество всех элементов кортежа, количество строк 's', индекс первого вхождения 's' в кортеж."""

my_tuple = (3, 's', 1, 5, 's')

total_elements = len(my_tuple)
print("Количество всех элементов в кортеже:", total_elements)

count_s = my_tuple.count('s')
print("Количество строк 's' в кортеже:", count_s)

first_index_of_s = my_tuple.index('s')
print("Индекс первого вхождения 's' в кортеж:", first_index_of_s)

"""# ***Задачи на словари***

Задание 5.1 . Создайте словарь d = {'1': 0, 2: 0, '3': 0} тремя способами. Выведите полученный словарь на экран
"""

d3 = {}
d3['1'] = 0
d3[2] = 0
d3['3'] = 0
print("Способ 1:", d3)

d2 = dict([('1', 0), (2, 0), ('3', 0)])
print("Способ 2:", d2)

d1 = {'1': 0, 2: 0, '3': 0}
print("Способ 3:", d1)

"""Задание 5.6 Удалите из словаря d = {'a': 1, 'b': 2, 'c': 3} элементы d['a'] и d['c'], использовав для второго элемента оператор удаления, а для первого имеющийся у словарей метод. Выведите результат на экран, после чего очистите словарь."""

d = {'a': 1, 'b': 2, 'c': 3}

d.pop('a')

del d['c']

print("Словарь после удаления элементов:", d)
d.clear()
print("Словарь после очистки:", d)  # {}

"""# ***Задачи на множества***

Задание 6.8 Даны три числа: 30, 5 и 25. Выведите на экран наименьшее из них, использовав для этого программную проверку.
"""

a, b, c = 30, 5, 25

if a <= b and a <= c:
    print("Наименьшее число:", a)
elif b <= a and b <= c:
    print("Наименьшее число:", b)
else:
    print("Наименьшее число:", c)

"""Задание 6.10 Сформируйте и выведите на экран множество из всех подходящих для этого элементов списка [True, 0, 1, False, 2+3.4j, 5, '5', (6, 7), [8, 9], {'10': 10}]. Объясните конечный результат. Используйте для решения задачи


"""

from collections.abc import Hashable

lst = [True, 0, 1, False, 2+3.4j, 5, '5', (6, 7), [8, 9], {'10': 10}]

result_set = {item for item in lst if isinstance(item, Hashable)}

print(result_set)

"""# ***Задачи на линейные алгоритмы***

Задание 7.2 Даны две переменные x = 10 и y = 55. Поменяйте их значения местами. Выведите значения переменных на экран до и после замены.
"""

x = 10
y = 55

print("До замены:")
print(f"x = {x}, y = {y}")

temp = x
x = y
y = temp

print("\nПосле замены:")
print(f"x = {x}, y = {y}")

"""Задание 7.9 С клавиатуры вводится целое число. Необходимо вывести число, обратное введенному по порядку составляющих его цифр. Например, если было введено число 12345, программа должна вывести пользователю на экран число 54321.



"""

number = int(input("Введите целое число: "))
reversed_number = 0

while number > 0:
    digit = number % 10
    reversed_number = reversed_number * 10 + digit
    number = number // 10

print("Перевёрнутое число:", reversed_number)

"""Задание 7.4. Вычислить и вывести на экран длину окружности и площадь круга одного и того же заданного радиуса R, который необходимо ввести с клавиатуры в сантиметрах. Результаты должны округляться до сотых.


"""

import math

R = float(input("Введите радиус круга (в см): "))
circumference = 2 * math.pi * R
area = math.pi * R ** 2
print(f"Длина окружности: {round(circumference, 2)} см")
print(f"Площадь круга: {round(area, 2)} см²")

"""# ***Задачи на логические выражения***

Задание 8.3. Записать и вывести на экран условие, которое является истинным, когда список li имеет хотя бы один элемент
"""

li = [1, 2, 3]

if li:  # Эквивалентно if len(li) > 0:
    print("Список НЕ пустой (имеет хотя бы один элемент)")
else:
    print("Список пустой")

"""Задание 8.8. Записать и вывести на экран логическое выражение, описывающее область определения функции у = √a + 1/(a - 7) + 1/(b + 5) + 1/(b - 2)."""

a = float(input("Введите a: "))
b = float(input("Введите b: "))

# Проверка области определения
is_defined = (a >= 0) and (a != 7) and (b != -5) and (b != 2)

print(f"Функция определена: {is_defined}")

"""Задание 8.11. Известно, что обрабатываемая строка может содержать только целые числа, например, '-32', '59'. Запишите и выведите на экран условие, которое является истинным только для строк, содержащих двузначное число."""

s = input("Введите строку: ")

# Проверка, что строка содержит двузначное число
is_two_digit = (s.isdigit() and len(s) == 2) or \
               (s.startswith('-') and s[1:].isdigit() and len(s) == 3)

print(f"Строка содержит двузначное число: {is_two_digit}")

"""# ***Задачи на if/else***

Задание 9.1. Определите, не является ли введенная пользователем с клавиатуры строка пустой. Результат проверки в виде True или False выведите на экран.
"""

s = input("Введите строку: ")
is_empty = not s
print(is_empty)

"""Задание 9.6. Напишите программу, которая будет проверять, является ли введенное пользователем значение цифрой десятичной системы счисления. В случае положительного результата, на экран пользователя должно выводиться название цифры, например, «3 - это три». В противном случае должно выводиться предупреждение «Введите цифру 10-й СС»"""

digit_names = {
    '0': 'ноль',
    '1': 'один',
    '2': 'два',
    '3': 'три',
    '4': 'четыре',
    '5': 'пять',
    '6': 'шесть',
    '7': 'семь',
    '8': 'восемь',
    '9': 'девять'
}

user_input = input("Введите символ: ")

if len(user_input) == 1 and user_input in digit_names:
    print(f"{user_input} - это {digit_names[user_input]}")
else:
    print("Введите цифру 10-й СС")

"""Задание 9.10. Определите четверть координатной плоскости, которой принадлежит точка A(x, y). Координаты точки должны вводиться с клавиатуры."""

x = float(input("Введите координату x: "))
y = float(input("Введите координату y: "))

if x > 0 and y > 0:
    print("Точка находится в I четверти")
elif x < 0 and y > 0:
    print("Точка находится во II четверти")
elif x < 0 and y < 0:
    print("Точка находится в III четверти")
elif x > 0 and y < 0:
    print("Точка находится в IV четверти")
elif x == 0 and y != 0:
    print("Точка находится на оси Y")
elif y == 0 and x != 0:
    print("Точка находится на оси X")
else:
    print("Точка находится в начале координат")

"""Задание 9.14. Сформируйте список li из 10-ти случайных натуральных чисел не превышающих 100. Для этого используйте инструкции from random import randint и for k in range(1, 11): li.append(randint(1, 100)). Далее, используя для обхода элементов списка цикл for, выведите на экран: максимальное значение четных чисел, если их меньше, чем нечетных; максимальное значение нечетных чисел, если их меньше, чем четных; максимальное значение из двух, если в списке содержится равное количество четных и нечетных чисел. Использовать для решения задачи другие встроенные функции запрещается! Условие li: [5, 20, 41, 63, 24, 21, 10, 62, 91, 19] Четных чисел меньше. Макс. четное: 62

li: [28, 58, 94, 59, 27, 30, 80, 18, 4, 53] Нечетных чисел меньше. Макс. нечетное: 59

li: [88, 32, 50, 99, 17, 12, 78, 95, 55, 47] Чисел одинаковое кол-во. Макс. из них нечетное: 99
"""

from random import randint

li = []
for k in range(1, 11):
    li.append(randint(1, 100))

even_count = 0
odd_count = 0
max_even = 0
max_odd = 0


for num in li:
    if num % 2 == 0:  # Четное число
        even_count += 1
        if num > max_even:
            max_even = num
    else:  # Нечетное число
        odd_count += 1
        if num > max_odd:
            max_odd = num
print(f"li: {li}")
if even_count < odd_count:
    print("Четных чисел меньше.")
    print(f"Макс. четное: {max_even}")
elif even_count > odd_count:
    print("Нечетных чисел меньше.")
    print(f"Макс. нечетное: {max_odd}")
else:
    print("Чисел одинаковое кол-во.")
    if max_even > max_odd:
        print(f"Макс. из них четное: {max_even}")
    else:
        print(f"Макс. из них нечетное: {max_odd}")
print("----------------------")

"""# ***Задачи на for/while***

Задание 10.2. Сколько кортежей содержится в списке [(1, 2), (3), (4,), (5+6), (7+8,)]? Проверьте свой ответ программно, используя циклы. Выведите кортежи на экран в одну строку
"""

lst = [(1, 2), (3), (4,), (5+6), (7+8,)]
tuples = []

for item in lst:
    if isinstance(item, tuple):
        tuples.append(item)

print("Кортежи в списке:", *tuples)
print("Количество кортежей:", len(tuples))

"""Задание 10.4. Дано множество целых чисел {12, 33, 24, 7, 19}. Выведите на экран только четные числа."""

numbers = {12, 33, 24, 7, 19}
print("Четные числа:")
for num in numbers:
    if num % 2 == 0:
        print(num, end=' ')
print("\n\nЧетные числа (вариант 2):")
print(*[num for num in numbers if num % 2 == 0])

"""Задание 10.7. Вычислить факториал заданного натурального числа. Факториал числа n вычисляется по формуле: n! = 123...n. Число n должно вводиться с клавиатуры и не должно превышать числа 30"""

import math

n = int(input("Введите натуральное число (не больше 30): "))

if n < 0 or n > 30:
    print("Ошибка: число должно быть от 0 до 30!")
else:
    print(f"{n}! = {math.factorial(n)}")

"""# ***Задачи на протокол итераций и генераторы***

Задание 11.3. Преобразуйте кортеж чисел (3.27, 5.755, 7.321) в словарь, в качестве ключей которого будут использованы числа кортежа, а значениями будут их округленные до десятых значения. Используйте для решения задачи генератор словарей. Выведите полученный словарь на экран.
"""

numbers = (3.27, 5.755, 7.321)

rounded_dict = {num: round(num, 1) for num in numbers}

print(rounded_dict)

"""11.6. Напишите функцию-генератор gen_func(n), которая при вызове будет возвращать итератор для последовательности четных чисел из диапазона от 1 до n включительно. Вызовите функцию, передав аргументу значение 20, и в ручном режиме выведите первые три числа сгенерированной последовательности, использовав метод next итератора."""

def gen_func(n):
    """Генератор чётных чисел от 1 до n включительно."""
    for num in range(1, n + 1):
        if num % 2 == 0:
            yield num
iterator = gen_func(20)

print(iterator.__next__())  # 2
print(iterator.__next__())  # 4
print(iterator.__next__())  # 6

"""Задание 11.8. Дан список [(1, 2), (3+4), (5,), (6+7, 8), (9+10,)]. Оставьте в нем только элементы, которые являются кортежами и содержат более одного элемента. Используйте для решения задачи генератор списков. Выведите итоговый и результирующий списки на экран"""

original_list = [(1, 2), (3+4), (5,), (6+7, 8), (9+10,)]

filtered_list = [item for item in original_list if isinstance(item, tuple) and len(item) > 1]
print("Исходный список:", original_list)
print("Результирующий список:", filtered_list)

"""# ***Задачи на функции***

Задание 12.2. Напишите функцию hello_friend, принимающую в качестве аргументов имя и фамилию пользователя и возвращающую строку в формате «Привет, {name} {surname}!». Вызовите функцию и выведите результат вызова на экран.
"""

def hello_friend(name, surname):
    """Функция возвращает приветствие по имени и фамилии"""
    return f"Привет, {name} {surname}!"

result = hello_friend("Василий", "Иванов")
print(result)

"""12.4. Создайте пользовательскую функцию print_args, принимающую произвольное количество аргументов и выводящую их затем на экран. Вызовите функцию, одновременно передав ей в качестве значений целое число, вещественное число, строку и пустой список."""

def print_args(*args):
    """Функция принимает произвольное количество аргументов и выводит их"""
    for arg in args:
        print(arg)

print_args(42, 3.14, "Hello", [])

"""12.6. Создайте и вызовите пользовательскую функцию-матрешку my_func_1, состоящую из четырех вложенных друг в друга определений аналогичных функций. Каждая функция должна выводить сообщение в формате 'In my_func_{номер функции}.', а также содержать определение и вызов следующей вложенной функции (в последней функции эта часть будет отсутствовать). Условие In my_func_1. In my_func_2. In my_func_3. In my_func_4. In my_func_5."""

def my_func_1():
    print('In my_func_1.')

    def my_func_2():
        print('In my_func_2.')

        def my_func_3():
            print('In my_func_3.')

            def my_func_4():
                print('In my_func_4.')

                def my_func_5():
                    print('In my_func_5.')

                my_func_5()
            my_func_4()
        my_func_3()
    my_func_2()
my_func_1()

"""Задание 12.13. Напишите простейшую функцию-калькулятор, которая будет выполнять с двумя переданными ей числами следующие действия: сложение, вычитание, умножение и деление с указанной точностью. Соответственно, функция должна принимать два позиционных числовых аргумента для чисел, один именованный строковый аргумент op (по умолчанию функция должна выполнять операцию сложения) и один именованный числовой аргумент prec для требуемой точности результата (по умолчанию три знака после запятой). В случае деления на ноль функция должна возвращать NaN, а при попытке выполнения непредусмотренной операции – сообщение об ошибке «Неподдерживаемый тип операции!». Выведите на экран результаты вызовов функции с точностью до сотых для числовых выражений: -13.756 + 59.291, 599 - 783, -7/55, 7/0 и 57.75*33.2."""

def calculator(a, b, op='+', prec=3):
    """
    Функция-калькулятор с указанной точностью.
    Поддерживает операции: +, -, *, /
    """
    try:
        if op == '+':
            result = a + b
        elif op == '-':
            result = a - b
        elif op == '*':
            result = a * b
        elif op == '/':
            if b == 0:
                return float('nan')  # Деление на ноль
            result = a / b
        else:
            return "Неподдерживаемый тип операции!"

        return round(result, prec)

    except Exception:
        return "Ошибка вычисления"

# Тестовые вызовы с точностью до сотых (prec=2)
print(f"-13.756 + 59.291 = {calculator(-13.756, 59.291, '+', 2)}")
print(f"599 - 783 = {calculator(599, 783, '-', 2)}")
print(f"-7 / 55 = {calculator(-7, 55, '/', 2)}")
print(f"7 / 0 = {calculator(7, 0, '/', 2)}")
print(f"57.75 * 33.2 = {calculator(57.75, 33.2, '*', 2)}")